---
- name: Copy multiple Files with the same from the same Host into different directories. NO REMOTE HOSTS INVOLVED !!
  hosts: ansible_client
  become: yes
  tasks:

    - name: Read file mappings
      slurp:
        src: /data/file_mappings.txt
      register: file_mapping_result

    - name: Convert binary content to a string
      set_fact:
        decoded_content: "{{ file_mapping_result['content'] | b64decode }}"

    - name: Save decoded content to a file
      copy:
        content: "{{ decoded_content }}"
        dest: "{{ item.destination }}"
      loop: "{{ decoded_content | from_yaml }}"

    - name: Debug message before rsync
      debug:
        msg: "Copying file with rsync: {{ item.source }} to {{ item.destination }}"
      loop: "{{ decoded_content | from_yaml }}"

###########################################################################################################################################################################################################################
#### Create a txt file called for example "file_mappings.txt" 
#### NOTE !! Create it in yml, then convert into a txt, when you get errors, it is most likely that your txt file is not in the correct format####
#### LEAVE NO SPACES in the text or it will give errors. Type manually to avoid errors.
#### The inside format of the txt should be like this ####
#### - source: /home/TEST/CLOCKMGM.so
####   destination: /data/bad/CLOCKMGM.so
#### - source: /tmp/CLOCKMGM.so
####   destination: /data/1/CLOCKMGM.so
############################################################################################################################################################################################################################
#### It should work with a CSV format too. Prepare your Excel or CSV file: Create a spreadsheet or CSV file with two columns, one for the source path and another for the destination path. 
#### Each row should represent a file mapping. 
#### -----------------------------------------------
#### | SOURCE               |  DESTINATION         |
#### -----------------------------------------------
#### | source/path/         |  destination/path    |
#### -----------------------------------------------
#### Update your Ansible playbook: Modify your Ansible playbook to read the Excel or CSV file using the appropriate Ansible modules. You can use modules like csvfile 
#### (for CSV) or xlrd (for Excel) to read the file and load the data into Ansible variables.
#### Example Ansible playbook to read a CSV file:
#### ---
#### - name: Copy Files to Remote Hosts
####  hosts: ansible_client
####  become: yes
####  tasks:
####    - name: Read file mappings from CSV
####      csvfile:
####        path: /path/to/your/mappings.csv
####      register: csv_data
####
####    - name: Debug CSV data
####      debug:
####        var: csv_data
####
####     Continue with your tasks
#############################################################################################################################################################################################################################
#### Read file mappings: This task uses the slurp module to read a file from a remote server. The src parameter specifies the path to the file on the remote server (/data/file_mappings.txt), 
#### and the result is stored in the file_mapping_result variable.
#### Convert binary content to a string: After reading the file, which might contain binary data, this task decodes the binary content into a string. It uses the b64decode filter to convert 
#### the binary content from base64 encoding to a human-readable string. The result is stored in the decoded_content variable.
#### Save decoded content to a file: In this task, the playbook uses the copy module to save the decoded content to a file. 
#### The content parameter is set to the decoded_content, and the dest parameter is specified as {{ item.destination }}. It uses a loop to iterate over the items in the decoded content, which is assumed to be in YAML format.
#### Debug message before rsync: Finally, the playbook logs a debug message for each item in the decoded content. It displays the source and destination paths for each file mapping. This task also uses a loop to iterate over the items.
#### This playbook essentially reads a file from a remote server (file_mappings.txt), decodes its content (assuming it's in YAML format), and then performs further actions based on the data in the file mappings, such as copying files with rsync.
